"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  build: () => build,
  findEntrypoint: () => findEntrypoint,
  shouldServe: () => shouldServe,
  startDevServer: () => startDevServer,
  version: () => version
});
module.exports = __toCommonJS(src_exports);

// src/build.ts
var import_node = require("@vercel/node");
var import_path = require("path");
var build = async (args) => {
  const entrypoint = findEntrypoint(args.files);
  process.env.EXPERIMENTAL_NODE_TYPESCRIPT_ERRORS = "1";
  return (0, import_node.build)({
    ...args,
    entrypoint
  });
};
var findEntrypoint = (files) => {
  const validEntrypoints = [
    ["index.cjs"],
    ["index.js"],
    ["index.mjs"],
    ["index.mts"],
    ["index.ts"],
    ["server.cjs"],
    ["server.js"],
    ["server.mjs"],
    ["server.mts"],
    ["server.ts"],
    ["src", "index.cjs"],
    ["src", "index.js"],
    ["src", "index.mjs"],
    ["src", "index.mts"],
    ["src", "index.ts"]
  ];
  const entrypoint = validEntrypoints.find((entrypointParts) => {
    const path = entrypointParts.join(import_path.sep);
    return files[path] !== void 0;
  });
  if (!entrypoint) {
    throw new Error("No valid entrypoint found");
  }
  return entrypoint.join(import_path.sep);
};

// src/index.ts
var import_node2 = require("@vercel/node");
var version = 3;
var shouldServe = async (opts) => {
  const requestPath = opts.requestPath.replace(/\/$/, "");
  if (requestPath.startsWith("api")) {
    return false;
  }
  return true;
};
var startDevServer = async (opts) => {
  const entrypoint = findEntrypoint(opts.files);
  process.env.EXPERIMENTAL_NODE_TYPESCRIPT_ERRORS = "1";
  return (0, import_node2.startDevServer)({
    ...opts,
    entrypoint
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  build,
  findEntrypoint,
  shouldServe,
  startDevServer,
  version
});
